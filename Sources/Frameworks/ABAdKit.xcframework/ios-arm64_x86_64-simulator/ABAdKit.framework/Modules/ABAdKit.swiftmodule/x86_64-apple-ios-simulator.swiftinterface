// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ABAdKit
@_exported import ABAdKit
import Combine
import Foundation
import GoogleMobileAds
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class ABMobileAds {
  public static let shared: ABAdKit.ABMobileAds
  public static let foregroundAppOpen: ABAdKit.ABForegroundAppOpen
  public static let splashAppOpen: ABAdKit.ABSplashAppOpen
  public static let inter: ABAdKit.ABInter
  final public var appOpenAdId: Swift.String
  final public var bannerAdId: Swift.String
  final public var interAdId: Swift.String
  final public var nativeAdId: Swift.String
  final public var isAdShow: Swift.Bool
  final public var interAdCounter: Swift.Int
  final public var interShowCount: Swift.Int
  final public var nativAdCounter: Swift.Int
  final public var nativeShowCount: Swift.Int
  final public var nativeAdStyle: ABAdKit.NativeAdStyleModel
  final public func startAd()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ABForegroundAppOpen : ObjectiveC.NSObject {
  public static let shared: ABAdKit.ABForegroundAppOpen
  final public func tryToPresentAd()
  @objc deinit
}
extension ABAdKit.ABForegroundAppOpen : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ABSplashAppOpen : ObjectiveC.NSObject {
  public static let shared: ABAdKit.ABSplashAppOpen
  final public func load(_ onLoad: @escaping () -> Swift.Void)
  @objc deinit
}
extension ABAdKit.ABSplashAppOpen : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
public enum ABBannerAdFormate {
  case standartBanner
  case largeBanner
  case mediumRectangle
  case fullBanner
  case leaderBoard
  case skyscrapper
  case fluid
  case adaptiveBanner
  public var adSize: GoogleMobileAds.GADAdSize {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public static func == (a: ABAdKit.ABBannerAdFormate, b: ABAdKit.ABBannerAdFormate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BannerAdStatus {
  case loading
  case success
  case failure
  public static func == (a: ABAdKit.BannerAdStatus, b: ABAdKit.BannerAdStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct ABBannerAdView : SwiftUICore.View {
  @SwiftUICore.State @_projectedValueProperty($adStatus) @_Concurrency.MainActor @preconcurrency public var adStatus: ABAdKit.BannerAdStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $adStatus: SwiftUICore.Binding<ABAdKit.BannerAdStatus> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var onShow: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public init(adFormate: ABAdKit.ABBannerAdFormate, adStatus: ABAdKit.BannerAdStatus = .loading, onShow: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7ABAdKit14ABBannerAdViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct BannerView : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public let adSize: GoogleMobileAds.GADAdSize
  @SwiftUICore.Binding @_projectedValueProperty($adStatus) @_Concurrency.MainActor @preconcurrency public var adStatus: ABAdKit.BannerAdStatus {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $adStatus: SwiftUICore.Binding<ABAdKit.BannerAdStatus> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: ABAdKit.BannerView.Context) -> some UIKit.UIViewController
  
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: @_opaqueReturnTypeOf("$s7ABAdKit10BannerViewV20makeUIViewController7contextQr7SwiftUI0fG20RepresentableContextVyACG_tF", 0) __, context: ABAdKit.BannerView.Context)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> ABAdKit.BannerView.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, GoogleMobileAds.GADBannerViewDelegate {
    @objc public func bannerViewDidReceiveAd(_ bannerView: GoogleMobileAds.GADBannerView)
    @objc public func bannerView(_ bannerView: GoogleMobileAds.GADBannerView, didFailToReceiveAdWithError error: any Swift.Error)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = @_opaqueReturnTypeOf("$s7ABAdKit10BannerViewV20makeUIViewController7contextQr7SwiftUI0fG20RepresentableContextVyACG_tF", 0) __
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ABInter : ObjectiveC.NSObject {
  public static let shared: ABAdKit.ABInter
  final public func load(_ onLoad: (() -> Swift.Void)? = nil)
  final public func presentAd(_ onDismiss: @escaping () -> Swift.Void)
  @objc deinit
}
extension ABAdKit.ABInter : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
@_Concurrency.MainActor @preconcurrency public struct NativeAd : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(nativeAdViewModel: ABAdKit.NativeAdViewModel, isAnimationOn: Swift.Bool = true, adHeight: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s7ABAdKit8NativeAdV4bodyQrvp", 0) __
}

public struct NativeAdStyleModel {
}
@_hasMissingDesignatedInitializers final public class NativeAdViewModel : Combine.ObservableObject {
  final public func refreshAd()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class GradientButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ABAdKit.ABBannerAdFormate : Swift.Equatable {}
extension ABAdKit.ABBannerAdFormate : Swift.Hashable {}
extension ABAdKit.BannerAdStatus : Swift.Equatable {}
extension ABAdKit.BannerAdStatus : Swift.Hashable {}
extension ABAdKit.ABBannerAdView : Swift.Sendable {}
extension ABAdKit.BannerView : Swift.Sendable {}
extension ABAdKit.NativeAd : Swift.Sendable {}
